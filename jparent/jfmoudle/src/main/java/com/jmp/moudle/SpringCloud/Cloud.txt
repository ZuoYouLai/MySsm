


微服务：
     1.一系列微小的服务共同组成
     2.跑在自己的进程里
     3.每个服务为独立的业务开发
     4.独立部署
     5.分布式管理



单体架构的缺点：
     1.开发效率低
     2.代码维护难
     3.部署不灵活
     4.稳定性不高
     5.扩展性不够


注册中心：
       客户端注册
       服务端注册



spring cloud 与 SOA 相差的是：消息总线

spring cloud：
    1.Eureka 注册服务：类似zookeeper一样，注册相应的服务内容
                       记录各个服务地址与端口信息，达到注册效果

    2.微服务中的服务与服务之间的调用是Http方式进行调用，与RPC方式不一样

    3.负载均衡器 ：Ribbion 分为：提供的策略：轮询Round Robin、随机Random、ResponseTime加权

    4.Feign使用 ： 底层也是一个http的请求方式来的，写法很不一样
                   1.在client端写一个接口加注解的方式进行调用
                   For Example：

                      @FeignClient(name = "${serviceName}")
                      public interface HotService
                      {
                          @RequestMapping(value = "/term/hot", method = RequestMethod.POST)
                          public Map<String, Object> hot(MultiValueMap params);
                      }
                      注意到上面提到的consumes参数去掉了，用了MultiValueMap就没必要再设置了
                      相应的，调用方式也要改变：
                      LinkedMultiValueMap<String, Object> multiValueMap = new LinkedMultiValueMap<>();
                      multiValueMap.add("terms", terms);
                      Map<String, Object> result = hotService.hot(multiValueMap);

                      作者：Carlyle1993
                      链接：https://www.jianshu.com/p/b63713879953
                      來源：简书
                      简书著作权归作者所有，任何形式的转载都请联系作者获得授权并注明出处。

       5.多个moudle开发

       6.同步与异步 ： 消息队列

       7.微服务与容器技术 --- 》 docker 与 devops 【例如炒菜跟盐一样】


       8.Config Server（统一的配置中心）
         原理：
             config server根据指定的代码的仓库来下载对应的配置文件，进行更新指向根据config server的服务进行更新文件内容，
             由于这里的web容器加载配置文件，内存是有相关的配置内容。需要spring cloud bus总线来进行通知，更新仓库的信息的时候
             然后再访问对应的/refrsh/bus进行消息队列的方式进行异步更新，更新内存的配置文件，更好的是git仓库中有web Hook动态的push，进行调用这个接口（post），
             这个接口名称对内为/refrsh/bus  对外的话则为：/monitor


       9.消息队列异步操作
          1.消息的安全的可达性 [Rabbitmq]
          2.spring cloud Stream组件的使用，input 与 output  效果如消息队列一样


        10.经典的微服务的扣库存的操作(非常重点)
          1.服务间的调用，异步操作，订单与库存的操作



        11.Zull服务网关：

                路由转发

                过滤器  ：
                        前置过滤  post过滤  后置过滤
                        前置过滤：可以起到限流  鉴权   用户类型的过滤操作
                        后置过滤：日志的统计

                限流： Google的Guava工具包中就提供了一个限流工具类——RateLimiter
                       参考url：
                              https://blog.csdn.net/v123411739/article/details/80718198

                鉴权： 判断用户的权限  达到过滤用户权限的操作

                跨越： ajax的同源策略
                       1.在类跟方法加上@CrossOrigin进行跨域访问
                       2.zull的定义一个filter类进行跨域的配置操作



                注意点：
                    1.访问相应的a服务，a服务在eureka注册了，访问对应a服务操作，链接为：网关开头：网关端口/a服务/a服务的接口名称
                    2.在网关传递到a服务的时候，会屏蔽掉了request相关信息。需要在yml进行配置去掉相应的过滤操作
                    3.每个过滤器都是有相应的优先级的，所以需要根据自己的业务访问的路由权限，来设置相应的优先级



          12.

