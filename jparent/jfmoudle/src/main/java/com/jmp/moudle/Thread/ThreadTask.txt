

线程的知识点:
    1.DeadLock  死锁
    2.synchronized :
                    synchronized 关键字,可以作用于class method 代码块
                    特性:原子性
                    关联:
                          参考文章 :  https://www.cnblogs.com/moongeek/p/7631447.html
                          wait :  当线程执行wait()方法时候，会释放当前的锁，然后让出CPU，进入等待状态
                          notify : 只有当 notify/notifyAll() 被执行时候，才会唤醒一个或多个正处于等待状态的线程，然后继续往下执行，
                                   直到执行完synchronized 代码块的代码或是中途遇到wait() ，再次释放锁
                           (notify 和wait 的顺序不能错，如果A线程先执行notify方法，B线程在执行wait方法，那么B线程是无法被唤醒的。)
                                   notify 和 notifyAll的区别
                                       notify方法只唤醒一个等待（对象的）线程并使该线程开始执行。所以如果有多个线程等待一个对象，这个方法只会唤醒其中一个线程，
                                       选择哪个线程取决于操作系统对多线程管理的实现。notifyAll 会唤醒所有等待(对象的)线程，尽管哪一个线程将会第一个处理取决于操作系统的实现。
                                       如果当前情况下有多个线程需要被唤醒，推荐使用notifyAll 方法。比如在生产者-消费者里面的使用，每次都需要唤醒所有的消费者或是生产者，
                                       以判断程序是否可以继续往下执行。

                                   在多线程中要测试某个条件的变化，使用if 还是while？
                                   　　要注意，notify唤醒沉睡的线程后，线程会接着上次的执行继续往下执行。所以在进行条件判断时候，可以先把 wait 语句忽略不计来进行考虑，
                                       显然，要确保程序一定要执行，并且要保证程序直到满足一定的条件再执行，要使用while来执行，以确保条件满足和一定执行。
    3.CopyOnWriteArrayList :
                    CopyOnWriteArrayList 多线程容器 适合的场景:读多写少的操作
                    原理:在高并发的时候，当某个线程写操作时，则内存生成一个新的一模一样的空间，进行写操作（这里有加锁的操作 ReentrantLock）
                         在写过程中，读线程则依然访问原来的容器，无阻塞，当线程写完后则将原来容器的引用指向新的容器，原来容器则不再使用，被销毁
                         适合的场景:读多写少的操作
    4.Queue :
             队列,FIFO数据结构
             参考: https://www.cnblogs.com/lemon-flm/p/7877898.html
             分类:
                非阻塞: ConcurrentLinkedQueue
                阻塞:   ArrayBlockQueue  : 容量是有界的,还可以设置公平参数的内容
                        LinkedBlockingQueue : 没有上限的阻塞容器
                        PriorityBlockQueue : 优先级队列
                        SynchronousQueue  :  缓存队列
             方法:
                 add        增加一个元索                     如果队列已满，则抛出一个IIIegaISlabEepeplian异常
             　　remove   移除并返回队列头部的元素    如果队列为空，则抛出一个NoSuchElementException异常
             　　element  返回队列头部的元素             如果队列为空，则抛出一个NoSuchElementException异常
             　　offer       添加一个元素并返回true       如果队列已满，则返回false
             　　poll         移除并返问队列头部的元素    如果队列为空，则返回null
             　　peek       返回队列头部的元素             如果队列为空，则返回null
             　　put         添加一个元素                      如果队列满，则阻塞
             　　take        移除并返回队列头部的元素     如果队列为空，则阻塞

     5.多线程的设计模式  :
               future :
                    执行的操作类似前端的ajax请求类似 : 代码的实现( http://www.cnblogs.com/jianzh5/p/6121120.htm )
                    [jdk 已实现future代码,直接使用即可]
                    (jdk 实现方式 : http://www.cnblogs.com/jianzh5/p/6657905.html)
               master-worker :
                    Master-Worker是常用的并行计算模式。它的核心思想是系统由两类进程协作工作：Master进程和Worker进程。Master负责接收和分配任务，Worker负责处理子任务。
                    当各个Worker子进程处理完成后，会将结果返回给Master，由Master作归纳总结。其好处就是能将一个大任务分解成若干个小任务，并行执行，从而提高系统的吞吐量。

