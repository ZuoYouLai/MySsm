<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:p="http://www.springframework.org/schema/p"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:task="http://www.springframework.org/schema/task"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.2.xsd
	http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.2.xsd http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd">



    <!-- 加载定时任务 :
                        需要配置多线程才能不会让任务与任务之间受到影响
                        默认的配置的单线程  需要配置线程池
    -->
    <task:executor id="executor" pool-size="5" />
    <task:scheduler id="scheduler" pool-size="10" />
    <task:annotation-driven scheduler="scheduler" executor="executor"/>


    <!--扫描相应的包内容-->
    <context:component-scan base-package="com.jmp.quarz"/>

    <!--
         加载db.properties文件中的内容，db.properties文件中key命名要有一定的特殊规则
         对mysql,redis配置文件进行加载
    -->
    <bean id="propertyConfig"
          class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath:${profiles.activation}-db.properties</value>
                <value>classpath:env.properties</value>
            </list>
        </property>
    </bean>
    <import resource="classpath:spring/mybatis-applicationContext.xml"/>
    <import resource="classpath:quartz.xml"/>
    <import resource="classpath:spring/redis-applicationContext.xml"/>
    <import resource="classpath:spring/disruptor.xml"/>



    <context:annotation-config/>
    <!-- 通知 -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <!-- 传播行为 -->
            <tx:method name="save*" propagation="REQUIRED" />
            <tx:method name="insert*" propagation="REQUIRED" />
            <tx:method name="add*" propagation="REQUIRED" />
            <tx:method name="create*" propagation="REQUIRED" />
            <tx:method name="delete*" propagation="REQUIRED" />
            <tx:method name="update*" propagation="REQUIRED" />
            <tx:method name="find*" propagation="SUPPORTS" read-only="true" />
            <tx:method name="select*" propagation="SUPPORTS" read-only="true" />
            <tx:method name="get*" propagation="SUPPORTS" read-only="true" />
        </tx:attributes>
    </tx:advice>
    <!-- 切面 -->
    <aop:config>
        <aop:advisor advice-ref="txAdvice"
                     pointcut="execution(* com.jmp.service.*.*(..))" />
    </aop:config>

    <context:component-scan base-package="com.jmp.service"/>
    <context:component-scan base-package="com.jmp.biz"/>
    <context:component-scan base-package="com.jmp.disruptor"/>


    <!--ApplicationContextHelper工具类的内容-->
    <bean id="applicationContextHelper" class="com.jmp.comm.ApplicationContextHelper" lazy-init="false"/>
    <!--Spring 集成线程池，不允许自己开启线程-->
    <bean id="threadPoolTaskExecutor" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
        <!-- 线程池维护线程的最少数量 -->
        <property name="corePoolSize" value="10"/>
        <!-- 线程池维护线程所允许的空闲时间 -->
        <property name="keepAliveSeconds" value="500"/>
        <!-- 线程池维护线程的最大数量 -->
        <property name="maxPoolSize" value="100"/>
        <!-- 线程池所使用的缓冲队列 -->
        <property name="queueCapacity" value="20"/>
        <property name= "rejectedExecutionHandler" >
            <!-- AbortPolicy:直接抛出java.util.concurrent.RejectedExecutionException异常 -->
            <!-- CallerRunsPolicy:主线程直接执行该任务，执行完之后尝试添加下一个任务到线程池中，可以有效降低向线程池内添加任务的速度 -->
            <!-- DiscardOldestPolicy:抛弃旧的任务、暂不支持；会导致被丢弃的任务无法再次被执行 -->
            <!-- DiscardPolicy:抛弃当前任务、暂不支持；会导致被丢弃的任务无法再次被执行 -->
            <bean class = "java.util.concurrent.ThreadPoolExecutor$DiscardPolicy"   />
        </property>
    </bean>

    <bean id="myThreadPoolExecutor" class="com.jmp.comm.MyThreadPoolExecutor" />



</beans>